"use client"

import { useState, useEffect, useCallback, useMemo, memo } from "react"
import { useRouter } from "next/navigation"
import { FighterSearch } from "@/components/fighter-search"
import { Card, CardContent } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { motion, AnimatePresence } from "framer-motion"
import { ArrowLeft, X, Swords, AlertTriangle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { useToast } from "@/components/ui/use-toast"
import { ENDPOINTS } from "@/lib/api-config"
import { cn } from "@/lib/utils"
import { FighterStats, Prediction } from "@/types/fighter"
import { 
  getAnimationVariants, 
  fadeAnimation, 
  cardHoverVariants, 
  EASING_SPRING, 
  EASING_SMOOTH 
} from '@/lib/animations'
import { useIsMobile } from "@/lib/utils"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"

const PredictionDisclaimer = memo(({ className }: { className?: string }) => {
  const isMobile = useIsMobile()
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
      className={cn(
        "rounded-lg bg-card/80 backdrop-blur-sm border border-yellow-500/20",
        "p-4 md:p-6 space-y-2",
        className
      )}
    >
      <div className="flex items-start gap-3">
        <AlertTriangle className="h-5 w-5 text-yellow-500 flex-shrink-0 mt-0.5" />
        <div className="space-y-1">
          <h4 className={cn(
            "font-semibold",
            isMobile ? "text-sm" : "text-base"
          )}>
            Note
          </h4>
          <p className={cn(
            "text-muted-foreground leading-relaxed",
            isMobile ? "text-xs" : "text-sm"
          )}>
            This prediction is generated by AI for entertainment purposes only. Many factors can affect fight outcomes that our model cannot predict.
          </p>
        </div>
      </div>
    </motion.div>
  )
})

PredictionDisclaimer.displayName = 'PredictionDisclaimer'

export default function ComparePage() {
  const { toast } = useToast();
  const router = useRouter();
  const [fighter1, setFighter1] = useState<FighterStats | null>(null);
  const [fighter2, setFighter2] = useState<FighterStats | null>(null);
  const [prediction, setPrediction] = useState<Prediction | null>(null);
  const [isPredicting, setIsPredicting] = useState(false);
  const [showPredictionModal, setShowPredictionModal] = useState(false);
  const isMobile = useIsMobile()
  const [activeTab, setActiveTab] = useState("physical")
  
  const animationVariants = useMemo(() => getAnimationVariants(isMobile), [isMobile])

  // Restore comparison state from sessionStorage on component mount
  useEffect(() => {
    const savedState = sessionStorage.getItem('comparePageState');
    if (savedState) {
      try {
        const state = JSON.parse(savedState);
        const now = Date.now();
        const stateAge = now - state.timestamp;
        
        // Only restore state if it's less than 30 minutes old
        if (stateAge < 30 * 60 * 1000) {
          if (state.fighter1) {
            setFighter1(state.fighter1);
          }
          if (state.fighter2) {
            setFighter2(state.fighter2);
          }
        } else {
          // Clear old state
          sessionStorage.removeItem('comparePageState');
        }
      } catch (error) {
        console.error('Error restoring comparison state:', error);
        sessionStorage.removeItem('comparePageState');
      }
    }
  }, []);

  // Clear old state on component mount to prevent stale data
  useEffect(() => {
    const savedState = sessionStorage.getItem('comparePageState');
    if (savedState) {
      try {
        const state = JSON.parse(savedState);
        const now = Date.now();
        const stateAge = now - state.timestamp;
        
        // Clear state older than 30 minutes
        if (stateAge >= 30 * 60 * 1000) {
          sessionStorage.removeItem('comparePageState');
        }
      } catch (error) {
        sessionStorage.removeItem('comparePageState');
      }
    }
  }, []);

  // Cleanup function to clear state when component unmounts if no fighters are selected
  useEffect(() => {
    return () => {
      // Only clear state on unmount if no fighters are selected
      if (!fighter1 && !fighter2) {
        try {
          sessionStorage.removeItem('comparePageState');
        } catch (error) {
          console.error('Error clearing state on unmount:', error);
        }
      }
    };
  }, [fighter1, fighter2]);

  const fetchFighterData = useCallback(async (fighterId: string): Promise<FighterStats | null> => {
    try {
      if (!fighterId) {
        toast({
          title: 'Error',
          description: 'Invalid fighter ID',
          variant: 'destructive',
        });
        return null;
      }
      
              const response = await fetch(`${ENDPOINTS.FIGHTER_DETAILS}/${fighterId}`);
      if (!response.ok) throw new Error('Fighter not found');
      
      const data = await response.json();
      
      // Format DOB if it exists
      let formattedDob = '';
      if (data?.DOB || data?.dob) {
        const rawDob = data?.DOB || data?.dob;
        try {
          // Try to parse the date in various formats
          const date = new Date(rawDob);
          if (!isNaN(date.getTime())) {
            formattedDob = date.toISOString().split('T')[0]; // Convert to YYYY-MM-DD
          } else {
            console.warn('Invalid date format received:', rawDob);
            formattedDob = rawDob; // Keep original if parsing fails
          }
        } catch (error) {
          console.error('Error formatting DOB:', error);
          formattedDob = rawDob;
        }
      }
      
      const sanitizedData: FighterStats = {
        id: data?.id || fighterId,
        name: data?.fighter_name || data?.name || '',
        image_url: data?.image_url || '',
        record: data?.Record || data?.record || '',
        height: data?.Height || data?.height || '',
        weight: data?.Weight || data?.weight || '',
        reach: data?.Reach || data?.reach || '',
        stance: data?.STANCE || data?.stance || '',
        dob: formattedDob || '',
        slpm: data?.SLpM || data?.SLPM || data?.slpm || '0',
        str_acc: data?.['Str. Acc.'] || data?.str_acc || '0%',
        sapm: data?.SApM || data?.SAPM || data?.sapm || '0',
        str_def: data?.['Str. Def'] || data?.str_def || '0%',
        td_avg: data?.['TD Avg.'] || data?.td_avg || '0',
        td_acc: data?.['TD Acc.'] || data?.td_acc || '0%',
        td_def: data?.['TD Def.'] || data?.td_def || '0%',
        sub_avg: data?.['Sub. Avg.'] || data?.sub_avg || '0',
        ranking: data?.ranking || 0,
        tap_link: data?.tap_link || '',
      };
      
      return sanitizedData;
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Fighter not found. Please try another fighter.',
        variant: 'destructive',
      });
      return null;
    }
  }, [toast]);

  const handleFighterSelect = useCallback(async (fighter: {id: string, name: string}, setFighter: (fighter: FighterStats | null) => void) => {
    if (!fighter || !fighter.id) {
      toast({
        title: 'Error',
        description: 'Invalid fighter selected',
        variant: 'destructive',
      });
      return;
    }
    
    setIsPredicting(true);
    const data = await fetchFighterData(fighter.id);
    setFighter(data);
    setIsPredicting(false);
  }, [fetchFighterData, toast]);

  const handleFighter1Select = useCallback((fighter: {id: string, name: string}) => handleFighterSelect(fighter, setFighter1), [handleFighterSelect]);
  const handleFighter2Select = useCallback((fighter: {id: string, name: string}) => handleFighterSelect(fighter, setFighter2), [handleFighterSelect]);

  // Update sessionStorage whenever fighters change
  useEffect(() => {
    const comparisonState = {
      fighter1: fighter1,
      fighter2: fighter2,
      timestamp: Date.now()
    };
    
    try {
      if (fighter1 || fighter2) {
        sessionStorage.setItem('comparePageState', JSON.stringify(comparisonState));
      } else {
        // Clear state if no fighters are selected
        sessionStorage.removeItem('comparePageState');
      }
    } catch (error) {
      console.error('Error saving comparison state:', error);
      // Try to clear the storage if it's causing issues
      try {
        sessionStorage.removeItem('comparePageState');
      } catch (clearError) {
        console.error('Error clearing comparison state:', clearError);
      }
    }
  }, [fighter1, fighter2]);

  const getPrediction = useCallback(async () => {
    if (!fighter1 || !fighter2 || !fighter1.id || !fighter2.id) {
      toast({
        title: 'Error',
        description: 'Please select two fighters to compare',
        variant: 'destructive',
      });
      return;
    }
    
    setIsPredicting(true);
    try {
      const response = await fetch(ENDPOINTS.PREDICTION, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          fighter1_id: fighter1.id,
          fighter2_id: fighter2.id
        })
      });
      const data = await response.json();
      console.log('Prediction response:', data);

      if (!response.ok) {
        console.error('Prediction API error:', data);
        if (response.status === 503) {
          toast({
            title: 'Service Temporarily Unavailable',
            description: data.message || 'The prediction service is temporarily unavailable. Please try again later.',
            variant: 'destructive',
          });
        } else if (response.status === 422) {
          // Handle validation errors specifically
          toast({
            title: 'Validation Error',
            description: 'Error with fighter data. Using IDs without names is not supported yet.',
            variant: 'destructive',
          });
        } else {
          toast({
            title: 'Error',
            description: data.detail || 'Failed to get prediction. Please try again.',
            variant: 'destructive',
          });
        }
        setIsPredicting(false);
        return;
      }

      // Map the new API response format to our frontend Prediction format
      const winnerName = data.fighter1_id === data.predicted_winner ? fighter1.name : fighter2.name;
      const loserName = data.fighter1_id === data.predicted_winner ? fighter2.name : fighter1.name;
      const confidencePercent: number = data.confidence_percent;
      const f1ProbPercent: number = data.fighter1_win_probability_percent;
      const f2ProbPercent: number = data.fighter2_win_probability_percent;

      // Construct the prediction state object
      const validatedPrediction: Prediction = {
        winner: winnerName,
        loser: loserName,
        winner_probability: confidencePercent,
        loser_probability: 100 - confidencePercent,
        prediction_confidence: confidencePercent,
        model_version: '2.0',
        head_to_head: { 
          fighter1_wins: 0,
          fighter2_wins: 0,
        },
        fighter1: {
          name: fighter1.name,
          record: fighter1.record || '',
          image_url: fighter1.image_url || '',
          probability: f1ProbPercent,
          win_probability: `${f1ProbPercent}%`
        },
        fighter2: {
          name: fighter2.name,
          record: fighter2.record || '',
          image_url: fighter2.image_url || '',
          probability: f2ProbPercent,
          win_probability: `${f2ProbPercent}%`
        }
      };

      setPrediction(validatedPrediction);
      setShowPredictionModal(true);
    } catch (error) {
      console.error('Prediction error:', error);
      toast({
        title: 'Error',
        description: 'Failed to get prediction. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsPredicting(false);
    }
  }, [fighter1, fighter2, toast]);

  const handlePredictClick = useCallback(() => {
    if (!isValidFighterData(fighter1) || !isValidFighterData(fighter2)) {
      toast({
        title: 'Error',
        description: 'Both fighters must be selected with valid data',
        variant: 'destructive',
      });
      return;
    }
    
    getPrediction();
  }, [fighter1, fighter2, getPrediction, toast]);

  // Update the FighterCard component to remove all animations
  const FighterCard = memo(({ fighter, onRemove }: { fighter: FighterStats, onRemove: () => void }) => {
    const router = useRouter();
    
    const handleViewProfile = (e: React.MouseEvent) => {
      e.preventDefault();
      e.stopPropagation();
      
      // Store current comparison state before navigating
      const comparisonState = {
        fighter1: fighter1,
        fighter2: fighter2,
        timestamp: Date.now()
      };
      
      // Store in sessionStorage so it persists during the session
      sessionStorage.setItem('comparePageState', JSON.stringify(comparisonState));
      
      // Pass the return URL as a query parameter
      const returnUrl = encodeURIComponent('/fight-predictions/compare');
      router.push(`/fighters/${fighter.id}?returnTo=${returnUrl}`);
    };

    const cardContent = (
      <>
        <img
          src={fighter.image_url || '/placeholder-fighter.png'}
          alt={fighter.name}
          className="w-full h-full object-cover object-center transition-transform duration-300 group-hover:scale-105"
          loading="eager"
        />
        {fighter.tap_link && (
          <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
            <span className="text-white text-sm">View on Tapology</span>
          </div>
        )}
      </>
    );

    return (
      <div className={cn(
        "relative group overflow-hidden rounded-xl bg-card/50 border border-primary/10",
        "w-full"
      )}>
        <div className="pb-[100%]" />

        {fighter?.image_url && (
          fighter.tap_link ? (
            <a 
              href={fighter.tap_link} 
              target="_blank" 
              rel="noopener noreferrer" 
              className="absolute inset-0 cursor-pointer"
              aria-label={`View ${fighter.name} on Tapology`}
            >
              {cardContent}
            </a>
          ) : (
            <div className="absolute inset-0">
              {cardContent}
            </div>
          )
        )}

        <div className="absolute inset-0 z-20 pointer-events-none">
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity bg-black/50 hover:bg-black/70 pointer-events-auto"
            onClick={(e) => { 
              e.preventDefault();
              e.stopPropagation();
              onRemove(); 
            }} 
          >
            <X className="h-4 w-4 text-white" />
          </Button>

          {fighter.ranking && fighter.ranking !== '99' && fighter.ranking !== 99 && (
            <div className="absolute top-3 left-3">
              <span className="px-2.5 py-1.5 rounded-full bg-primary/80 text-primary-foreground text-xs font-bold shadow-lg">
                {formatRanking(fighter.ranking)}
              </span>
            </div>
          )}

          <div className={cn(
            "absolute inset-x-0 bottom-0 p-2 md:p-4 min-h-16 md:min-h-20",
            "bg-gradient-to-t from-black/90 via-black/70 to-transparent"
          )}>
            <div className="space-y-1 md:space-y-1.5 relative z-10">
              <h3 className="text-base md:text-lg font-bold text-white leading-tight group-hover:text-primary-foreground transition-colors">
                {fighter.name}
              </h3>
              <div className="flex items-center gap-2 flex-wrap">
                <p className="text-xs md:text-sm text-white/90 font-medium">{fighter.record}</p>
                {fighter.weight && (
                  <>
                    <span className="text-white/50 text-xs md:text-sm">•</span>
                    <p className="text-xs md:text-sm text-white/90">{fighter.weight}</p>
                  </>
                )}
              </div>
              
              {/* View Profile Button */}
              <Button
                variant="ghost"
                size="sm"
                onClick={handleViewProfile}
                className="mt-2 px-2 py-1 h-auto text-xs bg-white/10 hover:bg-white/20 text-white border border-white/20 hover:border-white/30 pointer-events-auto"
              >
                View Profile
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  });

  // Memoize the fighter card component
  const MemoizedFighterCard = memo(({ fighter, onRemove }: { fighter: FighterStats, onRemove: () => void }) => (
    <FighterCard fighter={fighter} onRemove={onRemove} />
  ))

  // Memoized ComparisonRow
  const ComparisonRow = memo(({ label, value1, value2, higherIsBetter = true, unit = '', isPhysicalStat = false }: { 
    label: string;
    value1: string | number;
    value2: string | number;
    higherIsBetter?: boolean;
    unit?: string;
    isPhysicalStat?: boolean;
  }) => {
    const parseValue = (value: string | number): number => {
      if (isPhysicalStat) {
        const match = String(value).match(/(\d+)/);
        return match ? Number(match[1]) : 0;
      }
      if (unit === '%') {
        return safeParsePercentage(String(value));
      }
      return safeParseNumber(value);
    };

    const num1 = parseValue(value1);
    const num2 = parseValue(value2);
    
    const rawDiff = Math.abs(num1 - num2);
    const diff = rawDiff.toFixed(2);
    
    const isFirstBetter = higherIsBetter ? num1 > num2 : num1 < num2;
    
    const color1 = num1 > num2 ? 
      (higherIsBetter ? 'text-green-500' : 'text-red-500') : 
      num1 < num2 ? 
        (higherIsBetter ? 'text-red-500' : 'text-green-500') : 
        'text-yellow-500';
        
    const color2 = num2 > num1 ? 
      (higherIsBetter ? 'text-green-500' : 'text-red-500') : 
      num2 < num1 ? 
        (higherIsBetter ? 'text-red-500' : 'text-green-500') : 
        'text-yellow-500';
    
    const formatValue = (value: string | number): string => {
      if (unit === '%') {
        const numValue = String(value).replace('%', '').trim();
        return `${numValue}%`;
      }
      return String(value);
    };

    // Use fixed percentages for visualization rather than the actual values
    // Scale the values for better visualization
    const maxVisualWidth = 80; // Maximum width in percentage
    const maxVal = Math.max(num1, num2);
    
    // Normalize values between 0 and maxVisualWidth
    const normalizeValue = (val: number): number => {
      if (maxVal === 0) return 0;
      return (val / maxVal) * maxVisualWidth;
    };
    
    const width1 = normalizeValue(num1);
    const width2 = normalizeValue(num2);

    return (
      <div className="relative group w-full">
        <div className="grid grid-cols-[1fr_90px_1fr] gap-4 py-2 items-center hover:bg-accent/5 rounded-lg">
          {/* Left value cell */}
          <div className="relative text-center min-w-[80px] min-h-[32px] flex items-center justify-center">
            <div className="absolute inset-0 flex">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: Math.max(1, width1) + '%' }}
                transition={{ duration: 0.5, ease: "easeOut" }}
                className={cn(
                  "h-full opacity-10",
                  color1.includes("green") ? "bg-green-500" : 
                  color1.includes("red") ? "bg-red-500" : 
                  "bg-yellow-500"
                )}
                style={{ 
                  borderRadius: '4px'
                }}
              />
            </div>
            <div className="relative z-10">
              <motion.div 
                initial={{ opacity: 0, y: 5 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
                className={cn(
                  "font-medium", 
                  color1,
                  isMobile ? "" : "text-lg"
                )}
              >
                {formatValue(value1)}
                {num1 !== num2 && isFirstBetter && (
                  <span className={cn(
                    "ml-1 font-medium text-green-500",
                    isMobile ? "text-[10px]" : "text-xs"
                  )}>
                    (+{diff})
                  </span>
                )}
              </motion.div>
            </div>
          </div>

          {/* Label cell */}
          <div className={cn(
            "text-muted-foreground font-medium whitespace-nowrap text-center",
            isMobile ? "text-xs" : "text-sm"
          )}>
            {label}
          </div>

          {/* Right value cell */}
          <div className="relative text-center min-w-[80px] min-h-[32px] flex items-center justify-center">
            <div className="absolute inset-0 flex justify-end">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: Math.max(1, width2) + '%' }}
                transition={{ duration: 0.5, ease: "easeOut" }}
                className={cn(
                  "h-full opacity-10",
                  color2.includes("green") ? "bg-green-500" : 
                  color2.includes("red") ? "bg-red-500" : 
                  "bg-yellow-500"
                )}
                style={{ 
                  borderRadius: '4px'
                }}
              />
            </div>
            <div className="relative z-10">
              <motion.div 
                initial={{ opacity: 0, y: 5 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
                className={cn(
                  "font-medium", 
                  color2,
                  isMobile ? "" : "text-lg"
                )}
              >
                {formatValue(value2)}
                {num1 !== num2 && !isFirstBetter && (
                  <span className={cn(
                    "ml-1 font-medium text-green-500",
                    isMobile ? "text-[10px]" : "text-xs"
                  )}>
                    (+{diff})
                  </span>
                )}
              </motion.div>
            </div>
          </div>
        </div>
      </div>
    );
  });

  // Memoized SimpleComparisonRow
  const SimpleComparisonRow = memo(({ label, value1, value2 }: { 
    label: string;
    value1: string;
    value2: string;
  }) => (
    <div className="relative group w-full">
      <div className="grid grid-cols-[1fr_90px_1fr] gap-4 py-2 items-center hover:bg-accent/5 rounded-lg">
        <div className="relative text-center min-w-[80px] min-h-[32px] flex items-center justify-center">
          <div className="relative z-10">
            <div className={cn(
              "font-medium", 
              isMobile ? "" : "text-lg"
            )}>
              {value1}
            </div>
          </div>
        </div>

        <div className={cn(
          "text-muted-foreground font-medium whitespace-nowrap text-center",
          isMobile ? "text-xs" : "text-sm"
        )}>
          {label}
        </div>

        <div className="relative text-center min-w-[80px] min-h-[32px] flex items-center justify-center">
          <div className="relative z-10">
            <div className={cn(
              "font-medium", 
              isMobile ? "" : "text-lg"
            )}>
              {value2}
            </div>
          </div>
        </div>
      </div>
    </div>
  ));

  // Compute these values only when dependencies change
  const fighter1Age = useMemo(() => fighter1?.dob ? calculateAge(fighter1.dob) : 'N/A', [fighter1?.dob]);
  const fighter2Age = useMemo(() => fighter2?.dob ? calculateAge(fighter2.dob) : 'N/A', [fighter2?.dob]);
  
  const fighter1Experience = useMemo(() => fighter1?.record ? calculateExperience(fighter1.record) : 'N/A', [fighter1?.record]);
  const fighter2Experience = useMemo(() => fighter2?.record ? calculateExperience(fighter2.record) : 'N/A', [fighter2?.record]);
  
  const fighter1StrikeDiff = useMemo(() => fighter1 ? calculateStrikeDiff(fighter1) : 'N/A', [fighter1]);
  const fighter2StrikeDiff = useMemo(() => fighter2 ? calculateStrikeDiff(fighter2) : 'N/A', [fighter2]);

  return (
    <div className="fixed inset-0 pt-[65px] overflow-hidden">
      <div className="absolute inset-0 top-[65px] overflow-hidden">
        <div className="h-full px-2 sm:px-4 lg:px-8 overflow-y-auto scrollbar-none pb-safe">
        <motion.div 
          className="h-full flex flex-col pt-4 sm:pt-8 max-w-[1400px] mx-auto"
          {...(isMobile ? fadeAnimation : animationVariants.page)}
        >
          {/* Header */}
          <div className="flex items-center justify-between h-12 mb-4 max-w-6xl mx-auto w-full">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                onClick={() => router.push('/fight-predictions')}
                className="gap-1 px-2"
              >
                <ArrowLeft className="h-4 w-4" />
                <span className="sr-only sm:not-sr-only">Back</span>
              </Button>
              <h2 className="text-lg sm:text-xl font-bold">Fighter Comparison</h2>
            </div>
          </div>

            {/* === Tablet/Desktop Layout (!isMobile) === */}
            {!isMobile && (
          <div className={cn(
            "flex-1 overflow-visible",
            "grid md:grid-cols-[2fr_3fr_2fr] gap-6 lg:gap-8 max-w-7xl mx-auto min-w-0",
            "items-start"
          )}>
                
                {/* --- Column 1: Fighter 1 --- */}
                <div className="flex flex-col min-w-0">
                   {/* ... Fighter 1 Search + Card ... */}
                   <div className="bg-primary/10 rounded-lg mb-3 py-2"> <h3 className="text-base font-bold mb-0 text-center">FIGHTER 1</h3> </div>
                   <div className="relative z-30 fighter-search-1"> <FighterSearch onSelectFighter={handleFighter1Select} clearSearch={!!fighter1} searchBarId="fighter1" /> </div>
                   <div className="mt-4">
                     {fighter1 && (
                       <MemoizedFighterCard 
                         key={`fighter1-${activeTab}`} 
                         fighter={fighter1} 
                         onRemove={() => setFighter1(null)} 
                       />
                     )}
                   </div>
                </div>

                {/* --- Column 2: Stats Comparison --- */}
                <div className="flex flex-col min-w-0">
                  {/* VS Badge and Predict Button */}
                   <div className="flex flex-col items-center mb-4 pt-10">
                     {fighter1 && fighter2 && (
                        <>
                          <div className="flex items-center justify-center"> <motion.div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary/90 shadow-sm border border-background/20" initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} transition={{ duration: 0.3, delay: 0.2 }}> <span className="text-xs font-semibold text-primary-foreground">VS</span> </motion.div> </div>
                          <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.2 }} className="w-[250px] mt-4">
                            <motion.div whileHover={{ scale: 1.02, boxShadow: "0 0 15px 2px rgba(var(--primary), 0.3)" }} whileTap={{ scale: 0.98 }} className="w-full">
                              <Button size="default" onClick={handlePredictClick} disabled={isPredicting} className={cn( "w-full shadow-xl relative overflow-hidden py-5", "bg-gradient-to-r from-primary/90 to-primary", "hover:from-primary hover:to-primary/90", "text-primary-foreground transition-all duration-300 rounded-xl" )}>
                                <motion.div className="absolute inset-0 bg-gradient-to-r from-transparent via-primary-foreground/10 to-transparent" initial={{ x: "-100%" }} animate={isPredicting ? { x: ["100%", "-100%"], transition: { repeat: Infinity, duration: 1.5, ease: "linear" } } : { x: "100%" }} />
                                <div className="relative z-10 flex items-center justify-center"> {isPredicting ? (<> <span className="font-bold text-base">Predicting</span> <motion.span animate={{ opacity: [0, 1, 0] }} transition={{ duration: 1.5, repeat: Infinity, repeatType: "loop", times: [0, 0.5, 1] }}>...</motion.span> <motion.div animate={{ rotate: 360 }} transition={{ duration: 1, repeat: Infinity, ease: "linear" }} className="ml-2"> <Swords className="h-4 w-4" /> </motion.div> </>) : (<> <span className="font-bold text-base">Get Prediction</span> <Swords className="ml-2 h-4 w-4" /> </>)} </div>
                              </Button>
                            </motion.div>
                          </motion.div>
                        </>
                      )}
                   </div>
                   
                   {/* Stats Comparison Card */}
                   <div className="flex-1 w-full">
                      {fighter1 && fighter2 ? (
                       <Card className="bg-card/95 backdrop-blur-xl border-primary/10 shadow-xl w-full">
                         <CardContent className="p-4 sm:p-6">
                           <Tabs defaultValue="physical" className="w-full" onValueChange={setActiveTab}>
                             <TabsList className="w-full grid grid-cols-3 h-12 mb-2 bg-primary/5 p-1 rounded-lg sticky top-0 z-10">
                               <TabsTrigger value="physical" className="text-sm font-medium rounded-md">Physical</TabsTrigger>
                               <TabsTrigger value="striking" className="text-sm font-medium rounded-md">Striking</TabsTrigger>
                               <TabsTrigger value="grappling" className="text-sm font-medium rounded-md">Grappling</TabsTrigger>
                             </TabsList>
                             <div className="w-full" style={{ width: '100%', maxWidth: '100%', minWidth: '300px' }}>
                               <div className="relative w-full" style={{ width: '100%', minHeight: '300px' }}>
                                 <TabsContent value="physical" className="absolute inset-0 pt-2">
                                   <div className="space-y-2">
                                     <SimpleComparisonRow label="Height" value1={fighter1.height} value2={fighter2.height} />
                                     <SimpleComparisonRow label="Weight" value1={fighter1.weight} value2={fighter2.weight} />
                                     <SimpleComparisonRow label="Reach" value1={fighter1.reach} value2={fighter2.reach} />
                                     <SimpleComparisonRow label="Stance" value1={fighter1.stance} value2={fighter2.stance} />
                                     <SimpleComparisonRow label="Age" value1={fighter1Age} value2={fighter2Age} />
                                     <SimpleComparisonRow label="Experience" value1={fighter1Experience} value2={fighter2Experience} />
                                   </div>
                                 </TabsContent>
                                 <TabsContent value="striking" className="absolute inset-0 pt-2">
                                   <div className="space-y-2">
                                     <ComparisonRow label="Strikes/Min" value1={fighter1.slpm} value2={fighter2.slpm} unit="" />
                                     <ComparisonRow label="Accuracy" value1={fighter1.str_acc} value2={fighter2.str_acc} unit="%" />
                                     <ComparisonRow label="Defense" value1={fighter1.str_def} value2={fighter2.str_def} unit="%" />
                                     <ComparisonRow label="Absorbed/Min" value1={fighter1.sapm} value2={fighter2.sapm} higherIsBetter={false} unit="" />
                                     <ComparisonRow label="Striking Differential" value1={fighter1StrikeDiff} value2={fighter2StrikeDiff} unit="" />
                                   </div>
                                 </TabsContent>
                                 <TabsContent value="grappling" className="absolute inset-0 pt-2">
                                   <div className="space-y-2">
                                     <ComparisonRow 
                                       label="TD/15 Min" 
                                       value1={fighter1.td_avg} 
                                       value2={fighter2.td_avg} 
                                       unit="" 
                                     />
                                     <ComparisonRow label="TD Accuracy" value1={fighter1.td_acc} value2={fighter2.td_acc} unit="%" />
                                     <ComparisonRow label="TD Defense" value1={fighter1.td_def} value2={fighter2.td_def} unit="%" />
                                     <ComparisonRow 
                                       label="Sub/15 Min" 
                                       value1={fighter1.sub_avg} 
                                       value2={fighter2.sub_avg} 
                                       unit="" 
                                     />
                                     <ComparisonRow label="Ground Control" value1={calculateGroundControl(fighter1)} value2={calculateGroundControl(fighter2)} unit="%" />
                                   </div>
                                 </TabsContent>
                               </div>
                             </div>
                           </Tabs>
                         </CardContent>
                       </Card>
                      ) : (
                       <div className="flex items-center justify-center h-full min-h-[300px]">
                         <div className="text-center">
                           <div className="text-muted-foreground">
                             <Swords className="h-8 w-8 mx-auto mb-1 opacity-50" />
                             <p className="text-sm font-medium">
                               Select two fighters to compare
                             </p>
                           </div>
                         </div>
                       </div>
                      )}
                   </div>
                </div>

                {/* --- Column 3: Fighter 2 --- */}
                <div className="flex flex-col min-w-0">
                   {/* ... Fighter 2 Search + Card ... */}
                   <div className="bg-primary/10 rounded-lg mb-3 py-2"> <h3 className="text-base font-bold mb-0 text-center">FIGHTER 2</h3> </div>
                   <div className="relative z-30 fighter-search-2"> <FighterSearch onSelectFighter={handleFighter2Select} clearSearch={!!fighter2} searchBarId="fighter2" /> </div>
                   <div className="mt-4">
                     {fighter2 && (
                       <MemoizedFighterCard 
                         key={`fighter2-${activeTab}`} 
                         fighter={fighter2} 
                         onRemove={() => setFighter2(null)} 
                       />
                     )}
                   </div>
                </div>
                
              </div> // End Tablet/Desktop grid
            )}

            {/* === Mobile Layout Fallback === */}
            {isMobile && (
              <div className="flex flex-col space-y-4 max-w-md mx-auto">
                <div className="space-y-6 pt-4">
                  <div className="grid grid-cols-2 gap-4 relative">
                    <div className="flex flex-col">
                      <div className="bg-primary/10 rounded-lg mb-3 py-1.5">
                        <h3 className="text-sm font-bold mb-0 text-center">FIGHTER 1</h3>
                      </div>
                      <div className="relative z-30 fighter-search-1">
                        <FighterSearch onSelectFighter={handleFighter1Select} clearSearch={!!fighter1} searchBarId="fighter1" />
                      </div>
                      <div className="mt-3">
                        <div key={`fighter1-${activeTab}`}>
                          {fighter1 && (
                            <MemoizedFighterCard fighter={fighter1} onRemove={() => setFighter1(null)} />
                          )}
                        </div>
                      </div>
                    </div>
                    {fighter1 && fighter2 && (
                      <div className="absolute left-1/2 top-[47%] -translate-x-1/2 -translate-y-1/2 z-40">
                        <motion.div className="flex items-center justify-center w-6 h-6 rounded-full bg-primary/90 shadow-sm border border-background/20" initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} transition={{ duration: 0.3, delay: 0.2 }}>
                          <span className="text-[10px] font-semibold text-primary-foreground">VS</span>
                        </motion.div>
                      </div>
                    )}
                    <div className="flex flex-col">
                      <div className="bg-primary/10 rounded-lg mb-3 py-1.5">
                        <h3 className="text-sm font-bold mb-0 text-center">FIGHTER 2</h3>
                      </div>
                      <div className="relative z-30 fighter-search-2">
                        <FighterSearch onSelectFighter={handleFighter2Select} clearSearch={!!fighter2} searchBarId="fighter2" />
                      </div>
                      <div className="mt-3">
                        <div key={`fighter2-${activeTab}`}>
                          {fighter2 && (
                            <MemoizedFighterCard fighter={fighter2} onRemove={() => setFighter2(null)} />
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  {fighter1 && fighter2 && (
                    <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.2 }} className="w-full mx-auto mt-2">
                      <motion.div whileHover={{ scale: 1.02, boxShadow: "0 0 15px 2px rgba(var(--primary), 0.3)" }} whileTap={{ scale: 0.98 }} className="w-full">
                        <Button size="default" onClick={handlePredictClick} disabled={isPredicting} className={cn("w-full shadow-xl relative overflow-hidden py-5", "bg-gradient-to-r from-primary/90 to-primary", "hover:from-primary hover:to-primary/90", "text-primary-foreground transition-all duration-300 rounded-xl")}>
                          <motion.div className="absolute inset-0 bg-gradient-to-r from-transparent via-primary-foreground/10 to-transparent" initial={{ x: "-100%" }} animate={isPredicting ? { x: ["100%", "-100%"], transition: { repeat: Infinity, duration: 1.5, ease: "linear" } } : { x: "100%" }} />
                          <div className="relative z-10 flex items-center justify-center">
                            {isPredicting ? (
                              <>
                                <span className="font-bold text-base">Predicting</span>
                                <motion.span animate={{ opacity: [0, 1, 0] }} transition={{ duration: 1.5, repeat: Infinity, repeatType: "loop", times: [0, 0.5, 1] }}>...</motion.span>
                                <motion.div animate={{ rotate: 360 }} transition={{ duration: 1, repeat: Infinity, ease: "linear" }} className="ml-2">
                                  <Swords className="h-4 w-4" />
                                </motion.div>
                              </>
                            ) : (
                              <>
                                <span className="font-bold text-base">Get Prediction</span>
                                <Swords className="ml-2 h-4 w-4" />
                              </>
                            )}
                          </div>
                        </Button>
                      </motion.div>
                    </motion.div>
                  )}
                  {fighter1 && fighter2 ? (
                    <Card className="bg-card/95 backdrop-blur-xl border-primary/10 shadow-xl w-full">
                      <CardContent className="p-4 sm:p-6">
                        <Tabs defaultValue="physical" className="w-full" onValueChange={setActiveTab}>
                          <TabsList className="w-full grid grid-cols-3 h-12 mb-2 bg-primary/5 p-1 rounded-lg sticky top-0 z-10">
                            <TabsTrigger value="physical" className="text-sm font-medium rounded-md">Physical</TabsTrigger>
                            <TabsTrigger value="striking" className="text-sm font-medium rounded-md">Striking</TabsTrigger>
                            <TabsTrigger value="grappling" className="text-sm font-medium rounded-md">Grappling</TabsTrigger>
                          </TabsList>
                          <div className="w-full" style={{ width: '100%', maxWidth: '100%', minWidth: '300px' }}>
                            <div className="relative w-full" style={{ width: '100%', minHeight: '300px' }}>
                              <TabsContent value="physical" className="absolute inset-0 pt-2">
                                <div className="space-y-2">
                                  <SimpleComparisonRow label="Height" value1={fighter1.height} value2={fighter2.height} />
                                  <SimpleComparisonRow label="Weight" value1={fighter1.weight} value2={fighter2.weight} />
                                  <SimpleComparisonRow label="Reach" value1={fighter1.reach} value2={fighter2.reach} />
                                  <SimpleComparisonRow label="Stance" value1={fighter1.stance} value2={fighter2.stance} />
                                  <SimpleComparisonRow label="Age" value1={fighter1Age} value2={fighter2Age} />
                                  <SimpleComparisonRow label="Experience" value1={fighter1Experience} value2={fighter2Experience} />
                                </div>
                              </TabsContent>
                              <TabsContent value="striking" className="absolute inset-0 pt-2">
                                <div className="space-y-2">
                                  <ComparisonRow label="Strikes/Min" value1={fighter1.slpm} value2={fighter2.slpm} unit="" />
                                  <ComparisonRow label="Accuracy" value1={fighter1.str_acc} value2={fighter2.str_acc} unit="%" />
                                  <ComparisonRow label="Defense" value1={fighter1.str_def} value2={fighter2.str_def} unit="%" />
                                  <ComparisonRow label="Absorbed/Min" value1={fighter1.sapm} value2={fighter2.sapm} higherIsBetter={false} unit="" />
                                  <ComparisonRow label="Striking Differential" value1={fighter1StrikeDiff} value2={fighter2StrikeDiff} unit="" />
                                </div>
                              </TabsContent>
                              <TabsContent value="grappling" className="absolute inset-0 pt-2">
                                <div className="space-y-2">
                                  <ComparisonRow 
                                    label="TD/15 Min" 
                                    value1={fighter1.td_avg} 
                                    value2={fighter2.td_avg} 
                                    unit="" 
                                  />
                                  <ComparisonRow label="TD Accuracy" value1={fighter1.td_acc} value2={fighter2.td_acc} unit="%" />
                                  <ComparisonRow label="TD Defense" value1={fighter1.td_def} value2={fighter2.td_def} unit="%" />
                                  <ComparisonRow 
                                    label="Sub/15 Min" 
                                    value1={fighter1.sub_avg} 
                                    value2={fighter2.sub_avg} 
                                    unit="" 
                                  />
                                  <ComparisonRow label="Ground Control" value1={calculateGroundControl(fighter1)} value2={calculateGroundControl(fighter2)} unit="%" />
                                </div>
                              </TabsContent>
                            </div>
                          </div>
                        </Tabs>
                      </CardContent>
                    </Card>
                  ) : (
                    <div className="flex items-center justify-center py-8">
                      <div className="text-center">
                        <div className="text-muted-foreground">
                          <Swords className="h-8 w-8 mx-auto mb-1 opacity-50" />
                          <p className="text-sm font-medium">
                            Select two fighters to compare
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                  </div>
            )}
        </motion.div>
        </div>
      </div>

      {/* Prediction Modal */}
      <AnimatePresence>
        {showPredictionModal && prediction && (
          <motion.div
            className="fixed inset-0 z-[100] overflow-y-auto"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setShowPredictionModal(false)}
          >
            {/* Backdrop */}
            <motion.div
              className="fixed inset-0 bg-black/80 backdrop-blur-sm"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            />

            {/* Modal Content */}
            <div className="relative min-h-screen flex items-center justify-center p-4">
              <motion.div
                className="relative bg-background rounded-xl shadow-2xl max-w-lg w-full mx-auto overflow-hidden"
                initial={{ scale: 0.95, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.95, opacity: 0 }}
                transition={{ duration: 0.2 }}
                onClick={(e) => e.stopPropagation()}
              >
                {/* Close button */}
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-2 right-2 z-50"
                  onClick={() => setShowPredictionModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>

                <div className="p-6">
                  <h2 className="text-2xl font-bold text-center mb-2">Fight Prediction</h2>
                  <h3 className="text-lg text-center text-muted-foreground mb-6">Predicted Winner</h3>

                  {/* Winner Section */}
                  <div className="space-y-6 mb-8">
                    <div className="text-center">
                      <h4 className="text-xl md:text-2xl font-bold text-primary mb-2">
                        {prediction.winner}
                      </h4>
                      <div className="flex justify-center items-center gap-2">
                        <span className="text-lg md:text-xl font-semibold">
                          Confidence: {prediction.prediction_confidence.toFixed(2)}%
                        </span>
                      </div>
                    </div>

                    {/* Probability Bars */}
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>{prediction.fighter1.name}</span>
                          <span>{prediction.fighter1.probability.toFixed(2)}%</span>
                        </div>
                        <div className="h-2 bg-muted rounded-full overflow-hidden">
                          <motion.div
                            className="h-full bg-primary"
                            initial={{ width: 0 }}
                            animate={{ width: `${prediction.fighter1.probability}%` }}
                            transition={{ duration: 0.5, delay: 0.2 }}
                          />
                        </div>
                      </div>

                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>{prediction.fighter2.name}</span>
                          <span>{prediction.fighter2.probability.toFixed(2)}%</span>
                        </div>
                        <div className="h-2 bg-muted rounded-full overflow-hidden">
                          <motion.div
                            className="h-full bg-primary"
                            initial={{ width: 0 }}
                            animate={{ width: `${prediction.fighter2.probability}%` }}
                            transition={{ duration: 0.5, delay: 0.2 }}
                          />
                        </div>
                      </div>
                    </div>

                    <div className="text-center text-sm text-muted-foreground">
                      Model Version: {prediction.model_version}
                    </div>
                  </div>

                  {/* Add the disclaimer at the bottom of the modal */}
                  <PredictionDisclaimer className="mt-6" />
                </div>
              </motion.div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// Utility functions
const cleanFighterName = (name: string): string => {
  if (!name || name === 'undefined') return '';
  return name.includes('(') ? name.split('(')[0].trim() : name.trim();
};

const isValidFighterData = (fighter: FighterStats | null): boolean => {
  return fighter !== null && 
         typeof fighter.name === 'string' && 
         fighter.name.trim() !== '';
};

const safeParseNumber = (value: string | number | undefined | null, defaultValue: number = 0): number => {
  if (value === undefined || value === null) return defaultValue;
  const num = Number(value);
  return isNaN(num) ? defaultValue : num;
};

const safeParsePercentage = (value: string | undefined | null): number => {
  if (!value) return 0;
  const num = parseFloat(value.replace('%', ''));
  return isNaN(num) ? 0 : num;
};

const formatRanking = (ranking: string | number | null | undefined): string => {
  if (!ranking) return '';
  const rankNum = parseInt(String(ranking));
  if (isNaN(rankNum)) return '';
  if (rankNum === 1) return 'Champion';
  if (rankNum >= 2 && rankNum <= 16) return `#${rankNum - 1}`;
  return '';
};

const calculateAge = (dob: string): string => {
  if (!dob) return 'N/A';
  
  try {
    // Try to parse the date string
    let birthDate: Date | null = null;
    
    // Remove any leading/trailing whitespace and handle special characters
    const cleanDob = dob.trim().replace(/['"]/g, '');
    
    // Common date formats to try
    const formats = [
      // ISO format
      /^\d{4}-\d{2}-\d{2}/,
      // MM/DD/YYYY
      /^(\d{1,2})\/(\d{1,2})\/(\d{4})/,
      // DD/MM/YYYY
      /^(\d{1,2})\/(\d{1,2})\/(\d{4})/,
      // Month DD, YYYY
      /^([A-Za-z]+)\s+(\d{1,2}),?\s+(\d{4})/,
      // DD Month YYYY
      /^(\d{1,2})\s+([A-Za-z]+)\s+(\d{4})/
    ];
    
    // Try each format
    for (const format of formats) {
      const match = cleanDob.match(format);
      if (match) {
        if (format === formats[0]) { // ISO format
          birthDate = new Date(cleanDob);
        } else if (format === formats[1]) { // MM/DD/YYYY
          const [_, month, day, year] = match;
          birthDate = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);
        } else if (format === formats[2]) { // DD/MM/YYYY
          const [_, day, month, year] = match;
          birthDate = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);
        } else if (format === formats[3]) { // Month DD, YYYY
          const [_, month, day, year] = match;
          birthDate = new Date(`${year}-${getMonthNumber(month)}-${day.padStart(2, '0')}`);
        } else if (format === formats[4]) { // DD Month YYYY
          const [_, day, month, year] = match;
          birthDate = new Date(`${year}-${getMonthNumber(month)}-${day.padStart(2, '0')}`);
        }
        break;
      }
    }
    
    // If no format matched or date is invalid
    if (!birthDate || isNaN(birthDate.getTime())) {
      console.warn('Could not parse date:', dob);
      return 'N/A';
    }
    
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    // Validate the calculated age
    if (age < 18 || age > 100) {
      console.warn('Suspicious age calculated:', age, 'from DOB:', dob);
      return 'N/A';
    }
    
    return age.toString();
  } catch (error) {
    console.error('Error calculating age:', error, 'DOB:', dob);
    return 'N/A';
  }
};

// Helper function to convert month names to numbers
const getMonthNumber = (month: string): string => {
  const months: { [key: string]: string } = {
    'jan': '01', 'january': '01',
    'feb': '02', 'february': '02',
    'mar': '03', 'march': '03',
    'apr': '04', 'april': '04',
    'may': '05',
    'jun': '06', 'june': '06',
    'jul': '07', 'july': '07',
    'aug': '08', 'august': '08',
    'sep': '09', 'september': '09',
    'oct': '10', 'october': '10',
    'nov': '11', 'november': '11',
    'dec': '12', 'december': '12'
  };
  
  const monthKey = month.toLowerCase().substring(0, 3);
  return months[monthKey] || '01';
};

const calculateExperience = (record: string) => {
  if (!record) return "N/A";
  const matches = record.match(/\d+/g);
  if (!matches) return "N/A";
  const total = matches.reduce((sum, num) => sum + parseInt(num), 0);
  return `${total} fights`;
};

const calculateFinishRate = (fighter: FighterStats) => {
  if (!fighter.record || !fighter.slpm || !fighter.sub_avg) return "N/A";
  const totalFights = parseInt(fighter.record.split('-')[0]);
  const wins = totalFights - parseInt(fighter.record.split('-')[1]);
  const finishRate = ((wins / totalFights) * 100).toFixed(1);
  return `${finishRate}%`;
};

const calculateStrikeDiff = (fighter: FighterStats): string => {
  const landed = safeParseNumber(fighter.slpm);
  const absorbed = safeParseNumber(fighter.sapm);
  const diff = landed - absorbed;
  return diff > 0 ? `+${diff.toFixed(1)}` : diff.toFixed(1);
};

const calculateDurability = (fighter: FighterStats): string => {
  const strikesAbsorbed = safeParseNumber(fighter.sapm);
  const defense = safeParseNumber(fighter.str_def.replace('%', ''));
  const tdDefense = safeParseNumber(fighter.td_def.replace('%', ''));
  // Higher defense stats and lower strikes absorbed indicate better durability
  const durability = ((defense + tdDefense) / 2) * (1 - Math.min(strikesAbsorbed / 10, 0.8));
  return durability.toFixed(1);
};

const calculateCombatIQ = (fighter: FighterStats): string => {
  const strikeAcc = safeParseNumber(fighter.str_acc.replace('%', ''));
  const strikeDef = safeParseNumber(fighter.str_def.replace('%', ''));
  const tdAcc = safeParseNumber(fighter.td_acc.replace('%', ''));
  const tdDef = safeParseNumber(fighter.td_def.replace('%', ''));
  // Balance of offensive accuracy and defensive success shows fight IQ
  const combatIQ = (
    (strikeAcc * 0.3) +  // Striking accuracy weight
    (strikeDef * 0.3) +  // Strike defense weight
    (tdAcc * 0.2) +      // Takedown accuracy weight
    (tdDef * 0.2)        // Takedown defense weight
  );
  return combatIQ.toFixed(1);
};

const calculateDominance = (fighter: FighterStats): string => {
  if (!fighter.str_acc || !fighter.slpm) return "N/A";
  const strikingDominance = (
    (parseFloat(fighter.str_acc) / 100) * 
    parseFloat(fighter.slpm)
  );
  const grapplingDominance = (
    (parseFloat(fighter.td_acc) / 100) * 
    parseFloat(fighter.td_avg)
  );
  const dominanceScore = ((strikingDominance * 0.7 + grapplingDominance * 0.3) * 10).toFixed(1);
  return dominanceScore;
};

const calculateEfficiency = (fighter: FighterStats): string => {
  if (!fighter.str_acc || !fighter.slpm || !fighter.sapm || !fighter.td_acc || !fighter.td_avg) return "N/A";
  const strikingEfficiency = (
    (parseFloat(fighter.str_acc) / 100) * 
    (1 - parseFloat(fighter.sapm) / 
    (parseFloat(fighter.slpm) + 0.1))
  );
  const grapplingEfficiency = (
    (parseFloat(fighter.td_acc) / 100) * 
    parseFloat(fighter.td_avg)
  );
  const efficiencyScore = ((strikingEfficiency * 0.6 + grapplingEfficiency * 0.4) * 100).toFixed(1);
  return `${efficiencyScore}%`;
};

const calculateNetStrikes = (fighter: FighterStats): string => {
  const landed = safeParseNumber(fighter.slpm);
  const absorbed = safeParseNumber(fighter.sapm);
  return (landed - absorbed).toFixed(1);
};

const calculateTDSuccess = (fighter: FighterStats): string => {
  const tdAcc = safeParseNumber(fighter.td_acc.replace('%', ''));
  return `${tdAcc}`;
};

const calculateGroundThreat = (fighter: FighterStats): string => {
  const tdAvg = safeParseNumber(fighter.td_avg);
  const subAvg = safeParseNumber(fighter.sub_avg);
  return (tdAvg + subAvg).toFixed(1);
};

const calculateStrikeRatio = (fighter: FighterStats): string => {
  const landed = safeParseNumber(fighter.slpm);
  const absorbed = safeParseNumber(fighter.sapm);
  if (absorbed === 0) return landed.toFixed(1);
  return (landed / absorbed).toFixed(1);
};

const calculateTDSuccessRate = (fighter: FighterStats): string => {
  const tdAcc = safeParseNumber(fighter.td_acc.replace('%', ''));
  const tdDef = safeParseNumber(fighter.td_def.replace('%', ''));
  return ((tdAcc + tdDef) / 2).toFixed(0);
};

const calculateControlScore = (fighter: FighterStats): string => {
  const tdAvg = safeParseNumber(fighter.td_avg);
  const tdAcc = safeParseNumber(fighter.td_acc.replace('%', '')) / 100;
  return (tdAvg * tdAcc * 2).toFixed(1);
};

const calculateStrikingDiff = (fighter: FighterStats): string => {
  const landed = safeParseNumber(fighter.slpm);
  const absorbed = safeParseNumber(fighter.sapm);
  const diff = landed - absorbed;
  return diff > 0 ? `+${diff.toFixed(1)}` : diff.toFixed(1);
};

const calculateDefenseRate = (fighter: FighterStats): string => {
  const defense = safeParseNumber(fighter.str_def.replace('%', ''));
  const absorbed = safeParseNumber(fighter.sapm);
  const defenseRate = Math.max(0, defense * (1 - Math.min(absorbed / 10, 0.5)));
  return defenseRate.toFixed(0);
};

const calculateTakedownRate = (fighter: FighterStats): string => {
  const tdAvg = safeParseNumber(fighter.td_avg);
  const tdAcc = safeParseNumber(fighter.td_acc.replace('%', '')) / 100;
  return (tdAvg * tdAcc).toFixed(1);
};

const calculateGroundControl = (fighter: FighterStats): string => {
  // Get base stats
  const tdAvg = safeParseNumber(fighter.td_avg);
  const tdAcc = safeParseNumber(fighter.td_acc.replace('%', '')) / 100;
  const tdDef = safeParseNumber(fighter.td_def.replace('%', '')) / 100;
  const subAvg = safeParseNumber(fighter.sub_avg);

  // Calculate ground control score
  // - Higher weight on TD average (frequency of getting fight to ground)
  // - Consider TD accuracy (success in getting it there)
  // - Add submission attempts (threat on ground)
  // - Scale up for dominant grapplers
  const baseScore = (tdAvg * 15) * tdAcc + (subAvg * 10);
  
  // Apply scaling for more accurate representation
  let score = Math.min(100, baseScore);
  
  // Boost score if fighter shows strong wrestling metrics
  if (tdAvg > 3.5 && tdAcc > 0.45) {
    score = Math.min(100, score * 1.3); // 30% boost for dominant wrestlers
  }
  
  // Additional boost if they have both good takedowns AND submission threats
  if (tdAvg > 2 && subAvg > 1) {
    score = Math.min(100, score * 1.2); // 20% boost for well-rounded grapplers
  }

  return Math.round(score).toString();
}; 